function comment_slider(){	// collect the scroll object, at the same time apply the hidden overflow	// to remove the default scrollbars that will appear	if($('#footerQuoteSlider').size() > 0){		var $scroll = $('#footerQuoteSlider .scroll').css('overflow', 'hidden');		var $panels = $('#footerQuoteSlider .scrollContainer > div');		var $container = $('#footerQuoteSlider .scrollContainer');				var nextHeight = 0;		var nextPanel = null;				// if false, we'll float all the panels left and fix the width 		// of the container		var horizontal = true;				// float the panels left if we're going horizontal		if (horizontal) {			$panels.css({				'float' : 'left',				'position' : 'relative' // IE fix to ensure overflow is hidden			});						// calculate a new width for the container (so it holds all panels)			$container.css('width', $panels[0].offsetWidth * $panels.length);		}						// apply our left + right buttons		/*$scroll			.before('<img class="scrollButtons left" src="http://jqueryfordesigners.com/demo/images/scroll_left.png" />')			.after('<img class="scrollButtons right" src="http://jqueryfordesigners.com/demo/images/scroll_right.png" />');*/				// handle nav selection		function selectNav() {			$(this)				.parents('ul:first')				.find('a')				.removeClass('selected')				.end()				.end()				.addClass('selected');						// adjust scroll height on panel height...			// nextPanel = $(this).attr("href").substr(1);			// nextHeight = $(this).parent().parent().parent().find('#'+nextPanel+'.panel').height();			// $(this).parent().parent().parent().find('.scroll').animate({height: nextHeight+20}, 500);		}				$('#footerQuoteSlider .navigation').find('a').click(selectNav);				// go find the navigation link that has this target and select the nav		function trigger(data) {			var el = $('#footerQuoteSlider .navigation').find('a[href$="' + data.id + '"]').get(0);			selectNav.call(el);		}				// PROBLEME : si window.location.hash est différent que ceux utilisés... On tente de se déplacer sur rien !!!		if (window.location.hash) {			trigger({ id : window.location.hash.substr(1) });		} else {			$('ul.navigation a:first').click();		}				// offset is used to move to *exactly* the right place, since I'm using		// padding on my example, I need to subtract the amount of padding to		// the offset.  Try removing this to get a good idea of the effect		var offset = parseInt( ( horizontal ? $container.css('paddingTop') : $container.css('paddingLeft') ) || 0 ) * -1;						var scrollOptions = {			target: $scroll, // the element that has the overflow						// can be a selector which will be relative to the target			items: $panels,						navigation: '.navigation a',						// selectors are NOT relative to document, i.e. make sure they're unique			prev: 'img.left', 			next: 'img.right',						// allow the scroll effect to run both directions			axis: 'xy',						onAfter: trigger, // our final callback						offset: offset,						// duration of the sliding effect			duration: 500,						// easing - can be used with the easing plugin: 			// http://gsgd.co.uk/sandbox/jquery/easing/			easing: 'swing'		};				// apply serialScroll to the slider - we chose this plugin because it 		// supports// the indexed next and previous scroll along with hooking 		// in to our navigation.		$('#footerQuoteSlider').serialScroll(scrollOptions);				// now apply localScroll to hook any other arbitrary links to trigger 		// the effect		$.localScroll(scrollOptions);				// finally, if the URL has a hash, move the slider in to position, 		// setting the duration to 1 because I don't want it to scroll in the		// very first page load.  We don't always need this, but it ensures		// the positioning is absolutely spot on when the pages loads.		scrollOptions.duration = 1;		$.localScroll.hash(scrollOptions);	}}